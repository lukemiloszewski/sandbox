import os
from typing import List, Protocol, Union

import dotenv
import httpx
from openai import OpenAI, resources
from sentence_transformers import SentenceTransformer

dotenv.load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


class ClientProtocal(Protocol):
    def generate_embeddings(self, text: Union[str, List[str]]) -> List: ...


class ClientOpenAI:
    def __init__(self, api_key: str, embedding_model: str, http_client=None):
        self.embedding_model = embedding_model
        self.client = OpenAI(api_key=api_key, http_client=http_client)

    def generate_embeddings(self, text: Union[str, List[str]]):
        if isinstance(text, str):
            text = [text]

        text = [t.replace("\n", " ") for t in text]
        embeddings: List[resources.Embeddings] = self.client.embeddings.create(
            input=text, model=self.embedding_model
        ).data
        rv = [e.embedding for e in embeddings]
        return rv


class ClientSentenceTransformer:
    def __init__(self, model: str = "all-MiniLM-L6-v2"):
        self.client = SentenceTransformer(model)

    def generate_embeddings(self, text: Union[str, List[str]]):
        if isinstance(text, str):
            text = [text]

        embeddings = self.client.encode(text)
        return embeddings


def generate_embeddings(client: ClientProtocal, text: Union[str, List[str]]):
    embeddings = client.generate_embeddings(text)
    return embeddings


if __name__ == "__main__":
    client_sentence_transformer = ClientSentenceTransformer(model="all-MiniLM-L6-v2")
    client_openai = ClientOpenAI(
        api_key=OPENAI_API_KEY,
        embedding_model="text-embedding-3-small",
        http_client=httpx.Client(verify=False),
    )

    text = "A quick brown fox jumps over the lazy dog."

    embeddings = generate_embeddings(client_sentence_transformer, text)
    print(f"Embeddings shape: {len(embeddings)}, {len(embeddings[0])}")
    # print(f"Embeddings generated by SentenceTransforer: {embeddings}")

    embeddings = generate_embeddings(client_openai, text)
    print(f"Embeddings shape: {len(embeddings)}, {len(embeddings[0])}")
    # print(f"Embeddings generated by OpenAI: {embeddings}")
